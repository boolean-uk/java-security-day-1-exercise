openapi: 3.1.0
info:
  title: Java Security Challenge Day 1
  description: Java Security Challenge Test Api
  version: 0.2.3
  contact:
    name: Java Security Challenge

servers:
  - url: http://localhost:4000

tags:
  - name: game
  - name: user

paths:
  /games:
    get:
      tags:
        - game
      summary: Retrieve all games
      description: Retrieve a list of all available games.
      operationId: getGames
      responses:
        '200':
          description: A list of games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'

    post:
      tags:
        - game
      summary: Create a new game
      description: Create a new game entry.
      operationId: createGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGame'
      responses:
        '201':
          description: Game created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'

  /games/{id}:
    get:
      tags:
        - game
      summary: Retrieve a game by ID
      description: Retrieve a specific game by its ID.
      operationId: getGameById
      parameters:
        - name: id
          in: path
          description: ID of the game to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Retrieved game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'

    put:
      tags:
        - game
      summary: Update a game by ID
      description: Update an existing game entry by its ID.
      operationId: updateGameById
      parameters:
        - name: id
          in: path
          description: ID of the game to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGame'
      responses:
        '201':
          description: Game updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'

    delete:
      tags:
        - game
      summary: Delete a game by ID
      description: Delete an existing game entry by its ID.
      operationId: deleteGameById
      parameters:
        - name: id
          in: path
          description: ID of the game to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Game deleted successfully

  /users:
    get:
      tags:
        - user
      summary: Retrieve all users
      description: Retrieve a list of all users.
      operationId: getUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      tags:
        - user
      summary: Create a new user
      description: Create a new user entry.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags:
        - user
      summary: Retrieve a user by ID
      description: Retrieve a specific user by their ID.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Retrieved user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags:
        - user
      summary: Update a user by ID
      description: Update an existing user entry by their ID.
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      tags:
        - user
      summary: Delete a user by ID
      description: Delete an existing user entry by their ID.
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully

  /users/{userId}/games:
    get:
      tags:
        - user
      summary: Retrieve games borrowed by a user
      description: Retrieve a list of games borrowed by a specific user.
      operationId: getGamesBorrowedByUser
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
    post:
      tags:
        - user
      summary: Borrow a game
      description: Borrow a game by a user.
      operationId: borrowGame
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
        - name: gameId
          in: path
          description: ID of the game to borrow
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Game borrowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'


  /games/{gameId}/users:
    get:
      tags:
        - game
      summary: Retrieve users who have borrowed a game
      description: Retrieve a list of users who have borrowed a specific game.
      operationId: getUsersWhoBorrowedGame
      parameters:
        - name: gameId
          in: path
          description: ID of the game
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

components:
  schemas:
    CreateGame:
      type: object
      required:
        - title
        - gameStudio
        - ageRating
        - numberOfPlayers
        - genre
      properties:
        title:
          type: string
          example: "Example Game"
        gameStudio:
          type: string
          example: "Example Studio"
        ageRating:
          type: string
          example: "PG-13"
        numberOfPlayers:
          type: integer
          example: 4
        genre:
          type: string
          example: "Action"

    Game:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Example Game"
        gameStudio:
          type: string
          example: "Example Studio"
        ageRating:
          type: string
          example: "PG-13"
        numberOfPlayers:
          type: integer
          example: 4
        genre:
          type: string
          example: "Action"
        createdAt:
          type: string
          format: date-time
          example: "2023-03-14T11:01:56.633Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-03-14T11:01:56.633Z"

    CreateUser:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
          example: "2023-03-14T11:01:56.633Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-03-14T11:01:56.633Z"
