openapi: 3.1.0
info:
  title: Java API for java-security-day-1-exercise
  description: java-security-day-1-exercise
  version: 0.2.3
  contact:
    name: Security exercise

servers:
  - url: http://localhost:4000
tags:
  - name: games
  - name: customers
  - name: loans
paths:
  /customers:
    post:
      tags:
        - customers
      summary: Create a customer
      description: Create a new customer account.
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomer'
      responses:
        '201':
          description: Successfully created a new customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCustomer'
        '400':
          description: Could not create a new customer, please check all fields are correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
    get:
      tags:
        - customers
      summary: Get all customers
      description: Get a list of every customer.
      operationId: getCustomers
      responses:
        '200':
          description: Successfully returned a list of all customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllCustomers'
  /customers/{id}:
    put:
      tags:
        - customers
      summary: Update a customer
      description: Update an existing customer. If any field is not provided, the original value should not be changed. Any combination of fields can be updated.
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          description: The ID of the customer to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomer'
      responses:
        '201':
          description: Successfully updated the specified customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCustomer'
        '400':
          description: Could not create a new customer, please check all fields are correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No customer with that ID found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      tags:
        - customers
      summary: Delete a customer
      description: Delete an existing customer. When deleting data, it's useful to send the deleted record back to the client so they can re-create it if deletion was a mistake.
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          description: The ID of the customer to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the specified customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCustomer'
        '404':
          description: No customer with that ID found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /games:
    post:
      tags:
        - games
      summary: Create a game
      description: Create a new game.
      operationId: createGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGame'
      responses:
        '201':
          description: Successfully created a new game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleGame'
        '400':
          description: Could not create a new game, please check all fields are correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
    get:
      tags:
        - games
      summary: Get all games
      description: Get a list of every game.
      operationId: getGames
      responses:
        '200':
          description: Successfully returned a list of all games
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllGames'
  /games/{id}:
    put:
      tags:
        - games
      summary: Update a game
      description: Update an existing game. If any field is not provided, the original value should not be changed. Any combination of fields can be updated.
      operationId: updateGame
      parameters:
        - name: id
          in: path
          description: The ID of the game to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGame'
      responses:
        '201':
          description: Successfully updated the specified game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleGame'
        '400':
          description: Could not create a new game, please check all fields are correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '404':
          description: No game with that ID found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
    delete:
      tags:
        - games
      summary: Delete a game
      description: Delete an existing game. When deleting data, it's useful to send the deleted record back to the client so they can re-create it if deletion was a mistake.
      operationId: deleteGame
      parameters:
        - name: id
          in: path
          description: The ID of the game to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the specified game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleGame'
        '404':
          description: No customer with that ID found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /borrowgames/customers/{customerId}/games/{gameId}:
    post:
      tags:
        - loans
      summary: Loan a game
      description: Create a new loan for a particular customer and loan.
      operationId: createTicket
      parameters:
        - name: customerId
          in: path
          description: The ID of the customer to create the loan for
          required: true
          schema:
            type: integer
        - name: gameId
          in: path
          description: The ID of the game to create the loan for
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoan'
      responses:
        '201':
          description: Successfully created a loan for the customer and game specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleLoan'
        '404':
          description: No customer or game with those ids found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'

  /borrowgames/customers/{customerId}:
    get:
      tags:
        - loans
      summary: Get all loans
      description: Get a list of every loan a customer has booked for a game.
      operationId: getLoan
      parameters:
        - name: customerId
          in: path
          description: The loans made by a customer given their ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned a list of all loans for a given customer and game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllLoans'
        '404':
          description: No ticket found for the customer and screening with those ids found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'


components:
  schemas:
    CreateCustomer:
      type: object
      required: [name, email, phone]
      properties:
        name:
          type: string
          example: "Chris Wolstenholme"
        email:
          type: string
          example: "chris@muse.mu"
        phone:
          type: string
          example: "+44729388192"
    UpdateCustomer:
      type: object
      properties:
        name:
          type: string
          example: "Chris Wolstenholme"
        email:
          type: string
          example: "chris@muse.mu"
        phone:
          type: string
          example: "+44729388192"
    SingleCustomer:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "Chris Wolstenholme"
            email:
              type: string
              example: "chris@muse.mu"
            phone:
              type: string
              example: "+44729388192"
            createdAt:
              type: string
              format: DateTime
              example: "2023-03-14T11:01:56.633+00:00"
            updatedAt:
              type: string
              format: DateTime
              example: "2023-03-14T11:01:56.633+00:00"
    Customer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Chris Wolstenholme"
        email:
          type: string
          example: "chris@muse.mu"
        phone:
          type: string
          example: "+44729388192"
        createdAt:
          type: string
          format: DateTime
          example: "2023-03-14T11:01:56.633+00:00"
        updatedAt:
          type: string
          format: DateTime
          example: "2023-03-14T11:01:56.633+00:00"
    AllCustomers:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Customer'

    CreateGame:
      type: object
      required: [title, gameStudio, ageRating, genre]
      properties:
        title:
          type: string
          example: "Grand Theft Auto V"
        gameStudio:
          type: string
          example: "Rockstar North"
        ageRating:
          type: string
          example: "18+"
        genre:
          type: string
          example: "Action"
    UpdateGame:
      type: object
      properties:
        title:
          type: string
          example: "Grand Theft Auto V"
        gameStudio:
          type: string
          example: "Rockstar North"
        ageRating:
          type: string
          example: "18+"
        genre:
          type: string
          example: "Action"
    SingleGame:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
            title:
            type: string
            example: "Grand Theft Auto V"
        gameStudio:
          type: string
          example: "Rockstar North"
        ageRating:
          type: string
          example: "18+"
        genre:
          type: string
          example: "Action"
    Game:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Grand Theft Auto V"
        gameStudio:
          type: string
          example: "Rockstar North"
        ageRating:
          type: string
          example: "18+"
        genre:
          type: string
          example: "Action"
    AllGames:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Game'

    CreateLoan:
      type: object
      required: [ numSeats ]
      properties:
        numSeats:
          type: integer
          example: 3
    Loan:
      type: object
      properties:
        id:
          type: integer
          example: 1
        numSeats:
          type: integer
          example: 3
        createdAt:
          type: string
          format: DateTime
          example: "2023-03-14T11:01:56.633+00:00"
        updatedAt:
          type: string
          format: DateTime
          example: "2023-03-14T11:01:56.633+00:00"
    SingleLoan:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
            numSeats:
              type: integer
              example: 3
            createdAt:
              type: string
              format: DateTime
              example: "2023-03-14T11:01:56.633+00:00"
            updatedAt:
              type: string
              format: DateTime
              example: "2023-03-14T11:01:56.633+00:00"
    AllLoans:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Loan'


    Error400:
      type: object
      properties:
        status:
        type: string
        example: "error"
        data:
          type: object
        properties:
          message:
            type: string
            example: "bad request"

    Error404:
      type: object
      properties:
        status:
          type: string
          example: "error"
        data:
          type: object
          properties:
            message:
              type: string
              example: "not found"